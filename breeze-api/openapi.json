{
  "openapi": "3.1.0",
  "info": {
    "title": "Breeze API",
    "description": "A comprehensive API for managing yield farming operations, funds, and user authentication",
    "contact": {
      "name": "Breeze Team",
      "email": "support@breeze.com"
    },
    "license": {
      "name": ""
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.breeze.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/deposit/ix": {
      "post": {
        "tags": [
          "Deposits"
        ],
        "operationId": "process_for_deposit_with_instruction",
        "description": "Returns Breeze deposit instructions based on the parameters provided",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StructuredInputForDeposit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Deposit instruction prepared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/deposit/tx": {
      "post": {
        "tags": [
          "Deposits"
        ],
        "operationId": "process_for_deposit_with_transaction",
        "description": "Returns serialized deposit transaction (with handling user account creation if needed) based on the parameters provided",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StructuredInputForDeposit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Deposit transaction prepared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user-balances/{user_id}": {
      "get": {
        "tags": [
          "User Data"
        ],
        "operationId": "get_user_balances",
        "description": "Returns user balances based on the parameters provided",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Fund user identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset",
            "in": "query",
            "description": "Filter by specific asset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort by balance, default 'balance'",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order: 'asc' or 'desc', default 'desc'",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User balances retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBalancesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/user-yield/{user_id}": {
      "get": {
        "tags": [
          "User Data"
        ],
        "operationId": "get_user_yield",
        "description": "Returns user yield stats based on the parameters provided",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "Fund user identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fund_id",
            "in": "query",
            "description": "Filter by specific fund",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination, default 1",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page, default 10",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User yield data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserYieldResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/withdraw/ix": {
      "post": {
        "tags": [
          "Withdrawals"
        ],
        "operationId": "process_for_withdraw_with_instruction",
        "description": "Retrieves single withdraw instruction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StructuredInputForWithdraw"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Withdraw instruction prepared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/withdraw/tx": {
      "post": {
        "tags": [
          "Withdrawals"
        ],
        "operationId": "process_for_withdraw_with_transaction",
        "description": "Retrieves serialized withdraw transaction based on the parameters provided",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StructuredInputForWithdraw"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Withdraw transaction prepared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/yield-source/{yield_source_id}": {
      "get": {
        "tags": [
          "Yield Sources"
        ],
        "summary": "Get a specific yield source by its ID with basic stats",
        "operationId": "get_yield_source",
        "parameters": [
          {
            "name": "yield_source_id",
            "in": "path",
            "description": "Yield source identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Yield source retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YieldSourceResponse"
                }
              }
            }
          },
          "404": {
            "description": "Yield source not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiFundConstraint": {
        "type": "object",
        "required": [
          "yield_source_target",
          "constraint_type",
          "value"
        ],
        "properties": {
          "constraint_type": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "yield_source_target": {
            "$ref": "#/components/schemas/ApiYieldSourceTarget"
          }
        }
      },
      "WithdrawResponse": {
        "type": "object",
        "properties": {
          "lut_address": {
            "type": "string",
            "description": "Address of the lookup table",
            "example": "7Xpgp15kooeJmJoy6NP8YXJuXFEqs6aZiy6bwt4KdaxX"
          },
          "withdraw_instruction": {
            "type": "object",
            "description": "The compiled withdraw instruction (structure depends on backend)"
          }
        },
        "required": [
          "lut_address",
          "withdraw_instruction"
        ]
      },
      "ApiFundFee": {
        "type": "object",
        "required": [
          "fee_type",
          "fee_bps",
          "recipient"
        ],
        "properties": {
          "fee_bps": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "fee_type": {
            "type": "string"
          },
          "recipient": {
            "type": "string"
          }
        }
      },
      "ApiKey": {
        "type": "object",
        "required": [
          "api_key",
          "organization_id",
          "active",
          "created_at",
          "scopes"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Whether the API key is active"
          },
          "api_key": {
            "type": "string",
            "description": "Unique API key identifier"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the API key was created",
            "minimum": 0
          },
          "expires_at": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Expiration timestamp (optional)",
            "minimum": 0
          },
          "last_used_at": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Timestamp when the API key was last used",
            "minimum": 0
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name/description for the API key"
          },
          "organization_id": {
            "type": "string",
            "description": "Organization identifier"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Permissions or scopes for the API key"
          }
        }
      },
      "ApiKeyCreatedResponse": {
        "type": "object",
        "required": [
          "api_key",
          "message"
        ],
        "properties": {
          "api_key": {
            "$ref": "#/components/schemas/ApiKey",
            "description": "The newly created API key data"
          },
          "message": {
            "type": "string",
            "description": "Success message"
          }
        }
      },
      "ApiKeyListResponse": {
        "type": "object",
        "required": [
          "api_keys",
          "total"
        ],
        "properties": {
          "api_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            },
            "description": "List of API keys for the organization"
          },
          "total": {
            "type": "integer",
            "description": "Total count of API keys",
            "minimum": 0
          }
        }
      },
      "ApiOrganizationFundStats": {
        "type": "object",
        "required": [
          "total_funds",
          "total_deposits",
          "total_users",
          "total_values",
          "total_currencies"
        ],
        "properties": {
          "total_currencies": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "total_deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTokenPair"
            }
          },
          "total_funds": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "total_users": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "total_values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTokenPair"
            }
          }
        }
      },
      "ApiPreRebalanceAllocation": {
        "type": "object",
        "required": [
          "protocol_id",
          "position_id",
          "current_value",
          "yield_source_type",
          "protocol"
        ],
        "properties": {
          "current_value": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "position_id": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "protocol_id": {
            "type": "string"
          },
          "yield_source_type": {
            "type": "string"
          }
        }
      },
      "ApiProtocolOptions": {
        "type": "object",
        "required": [
          "kamino_reserve",
          "marginfi_bank",
          "drift_market"
        ],
        "properties": {
          "drift_market": {
            "type": "string"
          },
          "kamino_reserve": {
            "type": "string"
          },
          "marginfi_bank": {
            "type": "string"
          }
        }
      },
      "DepositResponse": {
        "type": "object",
        "properties": {
          "deposit_instruction": {
            "type": "array",
            "description": "Array of compiled deposit instructions",
            "items": {
              "type": "object",
              "description": "A single instruction object"
            }
          }
        },
        "required": [
          "deposit_instruction"
        ]
      },
      "ApiRebalanceHistory": {
        "type": "object",
        "required": [
          "audit_id",
          "fund_id",
          "timestamp",
          "rebalance_status",
          "fee_amount",
          "pre_rebalance_current_value",
          "pre_rebalance_unallocated_amount",
          "pre_rebalance_current_risk",
          "pre_rebalance_allocations",
          "target_allocations",
          "rebalance_instructions"
        ],
        "properties": {
          "audit_id": {
            "type": "string"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ]
          },
          "execution_slot": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "fee_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "fund_id": {
            "type": "string"
          },
          "pre_rebalance_allocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPreRebalanceAllocation"
            }
          },
          "pre_rebalance_current_risk": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "pre_rebalance_current_value": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "pre_rebalance_unallocated_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "rebalance_instructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiRebalanceInstruction"
            }
          },
          "rebalance_status": {
            "type": "string"
          },
          "target_allocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTargetAllocation"
            }
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "transaction_id": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ApiRebalanceInstruction": {
        "type": "object",
        "required": [
          "yield_source_type",
          "protocol",
          "position_id",
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "position_id": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "yield_source_type": {
            "type": "string"
          }
        }
      },
      "ApiTargetAllocation": {
        "type": "object",
        "required": [
          "yield_source_pubkey",
          "yield_source_type",
          "protocol",
          "target_amount",
          "objective_function_score"
        ],
        "properties": {
          "objective_function_score": {
            "type": "number",
            "format": "double"
          },
          "protocol": {
            "type": "string"
          },
          "target_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "yield_source_pubkey": {
            "type": "string"
          },
          "yield_source_type": {
            "type": "string"
          }
        }
      },
      "ApiTokenPair": {
        "type": "object",
        "required": [
          "token_mint",
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "minimum": 0
          },
          "token_mint": {
            "type": "string"
          }
        }
      },
      "ApiYieldAllocation": {
        "type": "object",
        "required": [
          "index",
          "yield_source_type",
          "protocol",
          "protocol_id",
          "position_id",
          "deposit_amount",
          "deposit_timestamp",
          "current_value",
          "time_weighted_value"
        ],
        "properties": {
          "current_value": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "deposit_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "deposit_timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "position_id": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "protocol_id": {
            "type": "string"
          },
          "time_weighted_value": {
            "type": "integer",
            "minimum": 0
          },
          "yield_source_type": {
            "type": "string"
          }
        }
      },
      "ApiYieldSource": {
        "type": "object",
        "required": [
          "pubkey",
          "source",
          "yield_type",
          "current_apy",
          "risk",
          "updated_at_timestamp",
          "base_assets"
        ],
        "properties": {
          "base_assets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of supported base assets"
          },
          "current_apy": {
            "type": "number",
            "format": "double",
            "description": "Current annual percentage yield"
          },
          "pubkey": {
            "type": "string",
            "description": "Unique identifier for the yield source"
          },
          "risk": {
            "type": "integer",
            "format": "int32",
            "description": "Risk level (0-255, lower is safer)",
            "minimum": 0
          },
          "source": {
            "type": "string",
            "description": "Protocol/source name (e.g., \"kamino\", \"marginfi\", \"drift\")"
          },
          "updated_at_timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the data was last updated",
            "minimum": 0
          },
          "yield_type": {
            "type": "string",
            "description": "Type of yield source (e.g., \"Lending\", \"TokenStaking\", etc.)"
          }
        }
      },
      "ApiYieldSourceTarget": {
        "type": "object",
        "required": [
          "yield_source_type",
          "protocol"
        ],
        "properties": {
          "protocol": {
            "type": "string"
          },
          "yield_source_type": {
            "type": "string"
          }
        }
      },
      "CreateFundApiResult": {
        "type": "object",
        "required": [
          "fund_key",
          "signature"
        ],
        "properties": {
          "fund_key": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "CreateUserFundApiWithInstructionSchema": {
        "type": "object",
        "required": [
          "create_user_fund_instruction"
        ],
        "properties": {
          "create_user_fund_instruction": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message description"
          }
        }
      },
      "FundPosition": {
        "type": "object",
        "required": [
          "fund_id",
          "fund_name",
          "position_value",
          "yield_earned",
          "apy"
        ],
        "properties": {
          "apy": {
            "type": "string"
          },
          "fund_id": {
            "type": "string"
          },
          "fund_name": {
            "type": "string"
          },
          "position_value": {
            "type": "string"
          },
          "yield_earned": {
            "type": "string"
          }
        }
      },
      "InputForCreatingUserFund": {
        "type": "object",
        "properties": {
          "fund_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "user_key": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "InputForDeposit": {
        "type": "object",
        "properties": {
          "all": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "fund_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "payer_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "user_key": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "InputForUpdatingPartnerDetails": {
        "type": "object",
        "required": [
          "organization_id",
          "organization_fund_id"
        ],
        "properties": {
          "organization_fund_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          }
        }
      },
      "InputForWithdraw": {
        "type": "object",
        "properties": {
          "all": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "fund_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "payer_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "user_key": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "Option": {
        "oneOf": [
          {
            "type": "null"
          },
          {
            "type": "object",
            "required": [
              "fund_id",
              "fees",
              "updated_at_timestamp",
              "updated_at_slot"
            ],
            "properties": {
              "fees": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiFundFee"
                }
              },
              "fund_id": {
                "type": "string"
              },
              "updated_at_slot": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "updated_at_timestamp": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              }
            }
          }
        ]
      },
      "PaginatedResponse": {
        "type": "object",
        "description": "Paginated response wrapper",
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiRebalanceHistory"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta",
            "description": "Pagination metadata"
          }
        }
      },
      "PaginationInfo": {
        "type": "object",
        "required": [
          "page",
          "limit",
          "total_items",
          "total_pages"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "total_items": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "total_pages": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "PaginationMeta": {
        "type": "object",
        "description": "Pagination metadata",
        "required": [
          "page",
          "per_page",
          "total",
          "total_pages",
          "has_more"
        ],
        "properties": {
          "has_more": {
            "type": "boolean",
            "description": "Whether there are more pages"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number",
            "minimum": 0
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of items",
            "minimum": 0
          },
          "total_pages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages",
            "minimum": 0
          }
        }
      },
      "Partner": {
        "type": "object",
        "required": [
          "organization",
          "organization_id",
          "organization_fund_id",
          "organization_slug",
          "organization_image_url"
        ],
        "properties": {
          "organization": {
            "type": "string"
          },
          "organization_fund_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "organization_image_url": {
            "type": "string"
          },
          "organization_slug": {
            "type": "string"
          }
        }
      },
      "PortalCreateApiKeyRequest": {
        "type": "object",
        "properties": {
          "expires_at": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Expiration timestamp (optional)",
            "minimum": 0
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name/description for the API key"
          },
          "scopes": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "Permissions or scopes for the API key"
          }
        }
      },
      "PortalUpdateApiKeyRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the API key is active"
          },
          "expires_at": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Expiration timestamp (optional)",
            "minimum": 0
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name/description for the API key"
          }
        }
      },
      "String": {
        "type": "string"
      },
      "StructuredInputForCreatingParter": {
        "type": "object",
        "required": [
          "params"
        ],
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Partner"
          }
        }
      },
      "StructuredInputForCreatingUserFund": {
        "type": "object",
        "required": [
          "params"
        ],
        "properties": {
          "params": {
            "$ref": "#/components/schemas/InputForCreatingUserFund"
          }
        }
      },
      "StructuredInputForDeposit": {
        "type": "object",
        "required": [
          "params"
        ],
        "properties": {
          "params": {
            "$ref": "#/components/schemas/InputForDeposit"
          }
        }
      },
      "StructuredInputForUpdatingPartnerDetails": {
        "type": "object",
        "required": [
          "params"
        ],
        "properties": {
          "params": {
            "$ref": "#/components/schemas/InputForUpdatingPartnerDetails"
          }
        }
      },
      "StructuredInputForWithdraw": {
        "type": "object",
        "required": [
          "params"
        ],
        "properties": {
          "params": {
            "$ref": "#/components/schemas/InputForWithdraw"
          }
        }
      },
      "UserBalance": {
        "type": "object",
        "required": [
          "asset",
          "symbol",
          "wallet_balance",
          "fund_positions",
          "total_balance",
          "total_yield"
        ],
        "properties": {
          "asset": {
            "type": "string"
          },
          "fund_positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FundPosition"
            }
          },
          "symbol": {
            "type": "string"
          },
          "total_balance": {
            "type": "string"
          },
          "total_yield": {
            "type": "string"
          },
          "wallet_balance": {
            "type": "string"
          }
        }
      },
      "UserBalancesResponse": {
        "type": "object",
        "required": [
          "balances",
          "total_portfolio_value",
          "total_yield_earned"
        ],
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBalance"
            }
          },
          "total_portfolio_value": {
            "type": "string"
          },
          "total_yield_earned": {
            "type": "string"
          }
        }
      },
      "UserFundStatsMeta": {
        "type": "object",
        "required": [
          "base_asset",
          "fund_id",
          "start",
          "end",
          "granularity"
        ],
        "properties": {
          "base_asset": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "fiat_currency": {
            "type": [
              "string",
              "null"
            ]
          },
          "fund_id": {
            "type": "string"
          },
          "granularity": {
            "type": "string"
          },
          "start": {
            "type": "string"
          }
        }
      },
      "UserYield": {
        "type": "object",
        "required": [
          "fund_id",
          "fund_name",
          "base_asset",
          "position_value",
          "yield_earned",
          "apy",
          "entry_date",
          "last_updated"
        ],
        "properties": {
          "apy": {
            "type": "string"
          },
          "base_asset": {
            "type": "string"
          },
          "entry_date": {
            "type": "string"
          },
          "fund_id": {
            "type": "string"
          },
          "fund_name": {
            "type": "string"
          },
          "last_updated": {
            "type": "string"
          },
          "position_value": {
            "type": "string"
          },
          "yield_earned": {
            "type": "string"
          }
        }
      },
      "UserYieldResponse": {
        "type": "object",
        "required": [
          "yields",
          "pagination",
          "total_yield_earned"
        ],
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/PaginationInfo"
          },
          "total_yield_earned": {
            "type": "string"
          },
          "yields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserYield"
            }
          }
        }
      },
      "Vec": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "time_stamps",
            "base_asset_value",
            "yeild_percentage",
            "meta"
          ],
          "properties": {
            "base_asset_value": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            },
            "fiat_value": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "number",
                "format": "double"
              }
            },
            "meta": {
              "$ref": "#/components/schemas/UserFundStatsMeta"
            },
            "time_stamps": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "yeild_percentage": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          }
        }
      },
      "YieldSourceResponse": {
        "type": "object",
        "required": [
          "yield_source"
        ],
        "properties": {
          "yield_source": {
            "$ref": "#/components/schemas/ApiYieldSource",
            "description": "Yield source information"
          }
        }
      },
      "SerializedTransactionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the transaction was successfully created",
            "example": true
          },
          "result": {
            "type": "string",
            "description": "The base64-encoded serialized transaction",
            "example": "serialized_transaction"
          }
        },
        "required": [
          "success",
          "result"
        ]
      },
      "f64": {
        "type": "number",
        "format": "double"
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      },
      "bearer_auth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Admin",
      "description": "Administrative operations"
    },
    {
      "name": "Deposits",
      "description": "Deposit operations"
    },
    {
      "name": "Withdrawals",
      "description": "Withdrawal operations"
    },
    {
      "name": "User Data",
      "description": "User balance and yield data"
    },
    {
      "name": "Funds",
      "description": "Fund management operations"
    },
    {
      "name": "Organization API Keys",
      "description": "Organization API key management"
    },
    {
      "name": "Partner Stats",
      "description": "Partner statistics and analytics"
    },
    {
      "name": "Yield Sources",
      "description": "Yield source information and statistics"
    }
  ]
}